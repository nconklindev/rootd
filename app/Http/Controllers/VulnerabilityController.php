<?php

namespace App\Http\Controllers;

use App\Models\Vulnerability;
use Illuminate\Http\Request;
use Inertia\Inertia;

class VulnerabilityController extends Controller
{
    public function index(Request $request)
    {
        // Check permission
        if (! auth()->user()->can('view_vulnerabilities')) {
            abort(403, 'Access denied');
        }

        $query = Vulnerability::query()
            ->with('user:id,name,email')
            ->orderBy('created_at', 'desc');

        // Apply search filter
        if ($request->filled('search')) {
            $search = $request->search;
            $query->where(function ($q) use ($search) {
                $q->where('title', 'like', "%{$search}%")
                    ->orWhere('cve_id', 'like', "%{$search}%")
                    ->orWhere('description', 'like', "%{$search}%")
                    ->orWhere('affected_product', 'like', "%{$search}%");
            });
        }

        // Apply severity filter
        if ($request->filled('severity')) {
            $query->where('severity', $request->severity);
        }

        // Apply status filter
        if ($request->filled('status')) {
            $query->where('status', $request->status);
        }

        // Apply product filter
        if ($request->filled('product')) {
            $query->where('affected_product', 'like', "%{$request->product}%");
        }

        // Paginate results
        $vulnerabilities = $query->paginate(10)->withQueryString();

        return Inertia::render('Vulnerabilities/Index', [
            'vulnerabilities' => $vulnerabilities,
            'filters' => [
                'search' => $request->search,
                'severity' => $request->severity,
                'status' => $request->status,
                'product' => $request->product,
            ],
            'can' => [
                'create' => auth()->user()->can('create_vulnerabilities'),
                'edit' => auth()->user()->can('edit_vulnerabilities'),
                'delete' => auth()->user()->can('delete_vulnerabilities'),
            ],
        ]);
    }

    public function show(Vulnerability $vulnerability)
    {
        if (! auth()->user()->can('view_vulnerabilities')) {
            abort(403, 'Access denied');
        }

        $vulnerability->load('user:id,name,email');

        return Inertia::render('Vulnerabilities/Show', [
            'vulnerability' => $vulnerability,
            'can' => [
                'edit_vulnerability' => auth()->user()->can('edit_vulnerabilities'),
                'delete_vulnerability' => auth()->user()->can('delete_vulnerabilities'),
                'delete_this_vulnerability' => auth()->user()->can('delete', $vulnerability),
                'edit_this_vulnerability' => auth()->user()->can('update', $vulnerability),
            ],
        ]);
    }

    public function create()
    {
        if (! auth()->user()->can('create_vulnerabilities')) {
            abort(403, 'Access denied');
        }

        return Inertia::render('Vulnerabilities/Create');
    }

    public function store(Request $request)
    {
        if (! auth()->user()->can('create_vulnerabilities')) {
            abort(403, 'Access denied');
        }

        $validated = $request->validate([
            'title' => 'required|string|max:255',
            'cve_id' => 'nullable|string|max:255|unique:vulnerabilities,cve_id',
            'description' => 'required|string',
            'severity' => 'required|in:critical,high,medium,low,info',
            'affected_product' => 'required|string|max:255',
            'affected_versions' => 'nullable|string|max:255',
            'status' => 'required|in:open,in_progress,resolved,wont_fix,duplicate',
            'reporter_name' => 'nullable|string|max:255',
            'reporter_email' => 'nullable|email|max:255',
            'cvss_score' => 'nullable|numeric|min:0|max:10',
            'remediation' => 'nullable|string',
            'discovered_at' => 'nullable|date',
            'disclosed_at' => 'nullable|date',
            'resolved_at' => 'nullable|date',
            'references' => 'nullable|array',
        ]);

        $validated['user_id'] = auth()->id();

        Vulnerability::create($validated);

        return redirect()->route('vulnerabilities.index')
            ->with('success', 'Vulnerability reported successfully.');
    }

    public function edit(Vulnerability $vulnerability)
    {
        if (! auth()->user()->can('edit_vulnerabilities')) {
            abort(403, 'Access denied');
        }

        return Inertia::render('Vulnerabilities/Edit', [
            'vulnerability' => $vulnerability,
        ]);
    }

    public function update(Request $request, Vulnerability $vulnerability)
    {
        if (! auth()->user()->can('edit_vulnerabilities')) {
            abort(403, 'Access denied');
        }

        $validated = $request->validate([
            'title' => 'required|string|max:255',
            'cve_id' => 'nullable|string|max:255|unique:vulnerabilities,cve_id,'.$vulnerability->id,
            'description' => 'required|string',
            'severity' => 'required|in:critical,high,medium,low,info',
            'affected_product' => 'required|string|max:255',
            'affected_versions' => 'nullable|string|max:255',
            'status' => 'required|in:open,in_progress,resolved,wont_fix,duplicate',
            'reporter_name' => 'nullable|string|max:255',
            'reporter_email' => 'nullable|email|max:255',
            'cvss_score' => 'nullable|numeric|min:0|max:10',
            'remediation' => 'nullable|string',
            'discovered_at' => 'nullable|date',
            'disclosed_at' => 'nullable|date',
            'resolved_at' => 'nullable|date',
            'references' => 'nullable|array',
        ]);

        $vulnerability->update($validated);

        return redirect()->route('vulnerabilities.index')
            ->with('success', 'Vulnerability updated successfully.');
    }

    public function destroy(Vulnerability $vulnerability)
    {
        if (! auth()->user()->can('delete_vulnerabilities')) {
            abort(403, 'Access denied');
        }

        $vulnerability->delete();

        return redirect()->route('vulnerabilities.index')
            ->with('success', 'Vulnerability deleted successfully.');
    }
}
